{"version":3,"sources":["components/SoundButton.tsx","models/SoundButtonItem.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["SoundButton","props","state","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","sound","react_default","a","createElement","Fab","size","color","Icon","icon","React","Component","SoundButtonItem","colour","blue","useStyles","makeStyles","theme","root","flexGrow","buttons","padding","paper","height","width","control","spacing","App","classes","sounds","push","useEffect","$link","document","head","appendChild","innerHTML","Grid","container","className","item","xs","justify","map","SoundButton_SoundButton","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5807efda.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { blue, red, green } from '@material-ui/core/colors';\nimport { Button, Fab } from '@material-ui/core';\nimport { SoundButtonItem } from '../models/SoundButtonItem';\nimport SvgIcon from '@material-ui/core/SvgIcon';\nimport Icon from '@material-ui/core/Icon';\n\nexport interface ISoundButtonProps {\n    sound: SoundButtonItem;\n}\n\nexport interface ISoundButtonState {\n\n}\n\n\nexport default class SoundButton extends React.Component<ISoundButtonProps, ISoundButtonState> {\n\tconstructor(props: ISoundButtonProps, state: ISoundButtonState) {\n\t\tsuper(props);\n    }\n\n    \n\n    \n\n    public render() {\n        const {sound} = this.props;\n        return(\n            <Fab size=\"large\" color=\"primary\">            \n            <Icon >\n            {sound.icon}\n            </Icon>\n            </Fab>\n        );\n    }\n}","import { blue } from \"@material-ui/core/colors\";\n\nexport class SoundButtonItem {\n\n    public sound: string;\n    public icon: string;\n    public colour: any;\n\n    constructor(sound: string, icon: string, colour ?: any) {\n        this.sound = sound;\n        this.icon = icon;\n        if (colour === null) {\n            this.colour = blue[400];\n        }\n        this.colour = colour;\n    }\n}","import React, { useEffect } from 'react';\nimport './App.css';\nimport 'typeface-roboto';\nimport Button from '@material-ui/core/Button';\nimport { Grid, makeStyles, Paper } from '@material-ui/core';\nimport SoundButton from './components/SoundButton';\nimport { SoundButtonItem } from './models/SoundButtonItem';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  buttons: {\n    padding: \"6rem\",\n  },\n  paper: {\n    height: 140,\n    width: 100,\n  },\n  control: {\n    padding: theme.spacing(3),\n  },\n}));\n\nconst App: React.FC = () => {\n  const classes = useStyles();\n\n  let sounds: SoundButtonItem[] = [];\n\n  sounds.push(new SoundButtonItem(\"sound\",\"accessibility\"));\n  sounds.push(new SoundButtonItem(\"sound\",\"accessibility\"));\n  sounds.push(new SoundButtonItem(\"sound\",\"accessibility\"));\n  sounds.push(new SoundButtonItem(\"sound\",\"accessibility\"));\n  sounds.push(new SoundButtonItem(\"sound\",\"accessibility\"));\n  sounds.push(new SoundButtonItem(\"sound\",\"accessibility\"));\n  sounds.push(new SoundButtonItem(\"sound\",\"accessibility\"));\n  sounds.push(new SoundButtonItem(\"sound\",\"accessibility\"));\n  sounds.push(new SoundButtonItem(\"sound\",\"accessibility\"));\n  sounds.push(new SoundButtonItem(\"sound\",\"accessibility\"));\n  sounds.push(new SoundButtonItem(\"sound\",\"accessibility\"));\n  sounds.push(new SoundButtonItem(\"sound\",\"accessibility\"));\n  sounds.push(new SoundButtonItem(\"sound\",\"accessibility\"));\n  sounds.push(new SoundButtonItem(\"sound\",\"accessibility\"));\n  sounds.push(new SoundButtonItem(\"sound\",\"accessibility\"));\n  sounds.push(new SoundButtonItem(\"sound\",\"accessibility\"));\n  sounds.push(new SoundButtonItem(\"sound\",\"accessibility\"));\n  sounds.push(new SoundButtonItem(\"sound\",\"accessibility\"));\n  sounds.push(new SoundButtonItem(\"sound\",\"accessibility\"));\n  sounds.push(new SoundButtonItem(\"sound\",\"accessibility\"));\n  sounds.push(new SoundButtonItem(\"sound\",\"accessibility\"));\n  sounds.push(new SoundButtonItem(\"sound\",\"accessibility\"));\n  sounds.push(new SoundButtonItem(\"sound\",\"accessibility\"));\n\n  // Hack to include the Material Icon Font, not sure if this should be refactored\n  useEffect(() => {\n    const $link = document.createElement(\"link\");\n  document.head.appendChild($link);\n  $link.innerHTML = `<link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/icon?family=Material+Icons\" />`;\n  });\n\n  return (\n    <Grid container className={classes.root} spacing={2}>\n      <Grid item xs={12}>\n        <Grid container className={classes.buttons} justify=\"center\" spacing={4}>\n          {sounds.map(sound => (\n            <Grid item>\n              <SoundButton  sound={sound}/>\n            </Grid>\n          ))}\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}